<template>
  <div class="api-view">
    <h1 id="fixed-attributes">
      组件常见属性
      <a id="attr?fixed=attributes"></a>
    </h1>
    <p>
    <h4>
      不同图形组件的使用大体类似,
      <span class="important">差异的部分会在具体的图形组件下说明,</span>
      下面我们来看看图形组件常见属性有哪些：
    </h4>
    </p>
    <p>
    <h5>
      <ul>
        <li>fill-color：填充色，默认"#000"。</li>
        <li>stroke-color：轮廓色，默认"#000"。</li>
        <li>line-width：线条宽度，默认1(单位px)。</li>
        <li>dash：设置线条虚线，默认为[]表示使用实线绘制。</li>
        <li>type：设置绘图的类型，一般默认为full（填充和轮廓同时画出）</li>
        <li>font-size：设置文字大小，默认大小为16</li>
        <li>font-family：设置文字字体，默认为"sans-serif"</li>
        <li>text-align：设置文字水平对齐方式，默认为"center"居中（"left"左对齐，"right"右对齐）</li>
        <li>text-basealign：设置文字垂直对齐方式，默认为"middle"垂直居中（"top"上对齐，"bottom"下对齐）</li>
      </ul>
    </h5>
    </p>
    <h1 id='fixed-basic'>
      基本图形组件
    </h1>
    <h2 id="fixed-arc">arc</h2>
    <h2 id="fixed-circle">circle</h2>
    <p>在点(cx,cy)处，用一种绘图的类型画出一个半径为radius的圆,[]中所含的属性都是可选属性。</p>
    <pre ui-code>
<circle cx='num' cy='num' radius='num' [attributes]></circle>
    </pre>
    <p>
    <ul>
      <li><span class="important">cx</span>:设置圆心的x坐标，是数字必输类型</li>
      <li><span class="important">cy</span>:设置圆心的y坐标，是数字必输类型</li>
      <li><span class="important">radius</span>:设置圆的半径，是数字必输类型</li>
      <li><span class="public">attributes</span>:非必输类型,详细查看<a href="#attr?fixed=attributes">组件常见属性</a></li>
    </ul>
    </p>
    <h2 id="fixed-path">path</h2>
    <p>
    <h4>path组件略有不同 ，我们将所有绘制路径的子标签都放在path标签下，例如：</h4>
    </p>
    <pre ui-code>
          <path>
      <move-to ></move-to>
      <line-to ></line-to>
      <bezier-to></bezier-to>
</path>
        </pre>
    <p>
    <h4>用户可以先在path标签中配置一些公共的属性，这些公共的属性均为非必输项,除却上面介绍过的，close属性表示是否让路径闭合</h4>
    </p>
    <pre ui-code>
      <path type='' fill-color='' stroke-color='' line-width=''  close='boolean'>
  
</path>
    </pre>
    <h4>直线</h4>
    <p>
    <h4>move-to表示画笔移动到(x,y)此时画笔离开画布，line-to表示画笔移动到(x,y)表示画笔没有离开画布</h4>
    </p>
    <pre ui-code>
      <move-to x="num" y="num"></move-to>
<line-to x="num" y="num"></line-to>
       
    </pre>
    <h4>贝塞尔曲线</h4>
    <p>
    <h4>当type为2的时候表示二次贝塞尔曲线，(cp1x,cp1y)为控制点</h4>
    </p>
    <pre ui-code>
      <move-to x="num" y="num"></move-to>
<bezier-to type='2' cp1x="num" cp1y="num" x="num" y="num"></bezier-to>
</pre>
    <p>
    <h4>当type为3的时候表示三次贝塞尔曲线，(cp1x,cp1y),(cp2x,cp2y)为控制点,其中(cp2x,cp2y)可以为非必输</h4>
    </p>
    <pre ui-code>
      <move-to x="num" y="num"></move-to>
<bezier-to type='3' cp1x="num" cp1y="num" cp2x="num" cp2y="num" x="num" y="num"></bezier-to>
</pre>

    <h2 id="fixed-rect">rect</h2>
    <h2 id="fixed-text">text</h2>

    <h1 id='fixed-combine'>
      复杂图形组件
    </h1>
    <h2 id="fixed-arcs">arcs</h2>
    <p>
    <h5>
      以(cx,cy)为圆心，给定radius为刻度尺长度，将传入的数据data转化为多个扇形呈现：
    </h5>
    <pre ui-code>
        <arcs cx='num' cy='num' data=[array] radius='num' [attributes]></arcs>
      </pre>
    <p>
    <h4>
      cx、cy、radius均为数字必输类型，data为二维数组必输类型；attributes为非必输属性，均有默认值。
    </h4>
    </p>
    </p>
    <h2 id="fixed-polarRuler">polar-ruler</h2>
    <h2 id="fixed-rects">rects</h2>
    <p>
    <h5>
      以(cx,cy)为圆心，给定radius为刻度尺长度，将传入的数据data转化为多个扇形呈现：
    </h5>
    <pre ui-code>
          <arcs cx='num' cy='num' data=[array] radius='num' [attributes]></arcs>
        </pre>
    <p>
    <h4>
      cx、cy、radius均为数字必输类型，data为二维数组必输类型；attributes为非必输属性，均有默认值。
    </h4>
    </p>
    </p>
    <h2 id="fixed-xRuler">x-ruler</h2>
    <p>
      以(zero-x,zero-y)为刻度尺原点,width作为长度，根据data的数据，画出x轴的刻度尺。
    </p>
    <pre ui-code>
      <x-ruler zero-x='num' zero-y='num' width='num' data='array' [attributes]></x-ruler>
    </pre>
    <p>
    <ul>
      <li><span class="important">zero-x</span>:设置原点的x坐标，是数字必输类型</li>
      <li><span class="important">zero-y</span>:设置原点的y坐标，是数字必输类型</li>
      <li><span class="important">width</span>:设置刻度尺总长度，是数字必输类型</li>
      <li><span class="important">data</span>:刻度尺所要表示的数据，是一维数组必输类型</li>
      <li><span class="public">attributes</span>:非必输类型,常见属性查看<a href="#attr?fixed=attributes">组件常见属性</a>，此外还有以下属性：
        <ul>
          <li><span class="private">zero</span>:非必输项，选择是否将原点绘制出来，默认true</li>
          <li><span class="private">drant</span>:非必输项，选择刻度尺的象限，默认1</li>
          <li><span class="private">data-type</span>:非必输项，选择传入的数据类型，默认num</li>
        </ul>
      </li>
    </ul>
    </p>
    <h2 id="fixed-yRuler">y-ruler</h2>
    <p>
      以(zero-x,zero-y)为刻度尺原点,width作为长度，根据data的数据，画出y轴的刻度尺。
    </p>
    <pre ui-code>
        <y-ruler zero-x='num' zero-y='num' width='num' data='array' [attributes]></y-ruler>
      </pre>
    <p>
    <ul>
      <li><span class="important">zero-x</span>:设置原点的x坐标，是数字必输类型</li>
      <li><span class="important">zero-y</span>:设置原点的y坐标，是数字必输类型</li>
      <li><span class="important">width</span>:设置刻度尺总长度，是数字必输类型</li>
      <li><span class="important">data</span>:刻度尺所要表示的数据，是一维数组必输类型</li>
      <li><span class="public">attributes</span>:非必输类型,常见属性查看<a href="#attr?fixed=attributes">组件常见属性</a>，此外还有以下属性：
        <ul>
          <li><span class="private">zero</span>:非必输项，选择是否将原点绘制出来，默认true</li>
          <li><span class="private">drant</span>:非必输项，选择刻度尺的象限，默认1</li>
          <li><span class="private">data-type</span>:非必输项，选择传入的数据类型，默认num</li>
        </ul>
      </li>
    </ul>
    </p>
  </div>
</template>
<script>
  import changeActive from '../../Service/changeActive.js';
  import fixedScroll from '../../Service/fixedScroll.js';
  export default {
    created() {
      changeActive('menu-2', 'series');
    },
    mounted() {
      fixedScroll(document.getElementById('api-id'), 44);
    }
  };
</script>
<style>
  .private {
    color: green;
    font-weight: 800;
    padding: 0 10px 0 50px;
  }
</style>